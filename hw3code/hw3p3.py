# -*- coding: utf-8 -*-
"""hw3p3.ipynb

Automatically generated by Colaboratory.
"""

import numpy as np
import matplotlib.pyplot as plt

F = np.array([[1, 0.5], [0, 1]])
H = np.array([[0, 1]])
Q = np.array([[0.1, 0.01], [0.01, 0.05]])
# Q = 1000 * np.array([[0.1, 0.01], [0.01, 0.05]])
R = 1000 * 0.1


def KF(x, P, z):

    x_predict = F @ x
    P_predict = F @ P @ F.T + Q
    kalman_gain = (P_predict @ H.T).dot(((H @ P_predict @ H.T + R) ** -1))
    y = z - H @ x_predict
    x_update = x_predict + kalman_gain.dot(y)
    P_update = (1 - kalman_gain.dot(H)).dot(P_predict)
    """
  print("P_update is: ")
  print(P_update)
  print("kalman_gain is: ")
  print(kalman_gain)
  print("S is: ")
  print(H @ P_predict @ H.T + R)
  """

    return x_update, P_update


x = np.array([[0.8, 2]])
xhat = np.array([[2, 4]])
P = np.array([[1, 0], [0, 2]])

for i in range(100):
    #   w = 0
    w = np.random.multivariate_normal(np.zeros(2), Q)
    v = np.random.normal(0, R)
    x = np.vstack((x, F @ x[-1, :] + w))
    z = H @ x[-1, :] + v

    xnew, P = KF(xhat[-1, :], P, z)
    xhat = np.vstack((xhat, xnew))

plt.plot(x[:, 0], x[:, 1], label="actual state")
plt.plot(xhat[:, 0], xhat[:, 1], label="predicted state")
plt.legend()
plt.xlabel("position")
plt.ylabel("velocity")
plt.show()
